# This project implements a Tic-Tac-Toe game where a human player can play against an AI opponent.
# The AI opponent is implemented using the Minimax algorithm,
# which ensures that it plays optimally and is unbeatable if the human player makes mistakes.


import math

class TicTacToe:
    def __init__(self):
        self.board = [' ' for _ in range(9)] 
    def print_board(self):
        for row in [self.board[i*3:(i+1)*3] for i in range(3)]:
            print('| ' + ' | '.join(row) + ' |')

    def available_moves(self):
        return [i for i, spot in enumerate(self.board) if spot == ' ']

    def empty_squares(self):
        return ' ' in self.board

    def num_empty_squares(self):
        return self.board.count(' ')

    def make_move(self, square, letter):
        self.board[square] = letter

    def winner(self, letter):
        
        for i in range(0, 9, 3):
            if all(self.board[i+j] == letter for j in range(3)):
                return True
       
        for i in range(3):
            if all(self.board[i+j] == letter for j in range(0, 9, 3)):
                return True
       
        if self.board[0] == self.board[4] == self.board[8] == letter:
            return True
        if self.board[2] == self.board[4] == self.board[6] == letter:
            return True
        return False

    def minimax(self, depth, player):
        if player == 'X':
            best = [-1, -math.inf]
        else:
            best = [-1, math.inf]

        if depth == 0 or self.winner('X') or self.winner('O'):
            score = self.evaluate()
            return [-1, score]

        for square in self.available_moves():
            self.make_move(square, player)
            score = self.minimax(depth - 1, 'O' if player == 'X' else 'X')
            self.board[square] = ' '  
            score[0] = square

            if player == 'X':
                if score[1] > best[1]:
                    best = score
            else:
                if score[1] < best[1]:
                    best = score

        return best

    def evaluate(self):
        if self.winner('X'):
            return 1
        elif self.winner('O'):
            return -1
        else:
            return 0

    def play(self):
        while self.empty_squares():
            if self.winner('X'):
                print("You win!")
                break
            elif self.winner('O'):
                print("You lose!")
                break
            elif not self.empty_squares():
                print("It's a draw!")
                break

            self.print_board()
            print("Available moves:", self.available_moves())

            move = -1
            while move not in self.available_moves():
                move = int(input("Your move (0-8): "))
            
            self.make_move(move, 'X')

            if self.winner('X'):
                print("You win!")
                break
            elif not self.empty_squares():
                print("It's a draw!")
                break

            best_move = self.minimax(self.num_empty_squares(), 'O')[0]
            self.make_move(best_move, 'O')
            print("AI plays:", best_move)

if __name__ == '__main__':
    game = TicTacToe()
    game.play()
