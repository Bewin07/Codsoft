# TASK 5- FACE DETECTION AND RECOGNITION

# This project is a simple face detection application built using Python and Tkinter. 
# It utilizes OpenCV's pre-trained Haar Cascade classifier for face detection. 
# The application allows users to select an image file containing faces and displays the image with rectangles drawn around the detected faces.

# code: 

import cv2
import tkinter as tk
from PIL import Image, ImageTk

# Load the pre-trained Haar Cascade classifier for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Function to detect faces in an image
def detect_faces(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
    return faces

# Function to update the image displayed in the Tkinter window
def update_image():
    global img_tk
    detected_faces = detect_faces(cv2.imread(image_path))
    for (x, y, w, h) in detected_faces:
        cv2.rectangle(image, (x, y), (x+w, y+h), (255, 0, 0), 2)
    img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    img = Image.fromarray(img)
    img_tk = ImageTk.PhotoImage(img)
    label.config(image=img_tk)
    label.image = img_tk

# Creating the Tkinter window for displaying the image
window = tk.Tk()
window.title("Face Detection")

# Load the input image that has to detected
image_path = 'people-collage-design.jpg'
image = cv2.imread(image_path)

# Create a label to display the image
img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
img = Image.fromarray(img)
img_tk = ImageTk.PhotoImage(img)
label = tk.Label(window, image=img_tk)
label.pack()

# Update the image with detected faces
update_image()

# Button to re-detect faces
button = tk.Button(window, text="Detect Faces", command=update_image)
button.pack()

# Run the Tkinter event loop
window.mainloop()
